service: til

plugins:
  - serverless-webpack
  
provider:
  name: aws
  stage: prod
  runtime: nodejs14.x
  region: ap-southeast-2
  deploymentBucket:
    name: til-serverless-deployments
  logRetentionInDays: 7
  # vpc:
  #   securityGroupIds:
  #     - ${file(stage-prod.yml):SECURITY_GROUP_ID}
  #   subnetIds:
  #     - ${file(stage-prod.yml):SUBNET_A}
  #     - ${file(stage-prod.yml):SUBNET_B}
  #     - ${file(stage-prod.yml):SUBNET_C}
    
  environment:
    ENV: ${file(stage-prod.yml):ENV}
    MYSQL_HOST: ${file(stage-prod.yml):MYSQL_HOST}
    MYSQL_USER: ${file(stage-prod.yml):MYSQL_USER}
    MYSQL_PASSWORD: ${file(stage-prod.yml):MYSQL_PASSWORD}
    MYSQL_DATABASE: ${file(stage-prod.yml):MYSQL_DATABASE}
    WEB_URL: ${file(stage-prod.yml):WEB_URL}
    COGNITO_CLIENT_ID: ${file(stage-prod.yml):COGNITO_CLIENT_ID}
    FACEBOOK_CLIENT_SECRET: ${file(stage-prod.yml):FACEBOOK_CLIENT_SECRET}
    GITHUB_CLIENT_ID: ${file(stage-prod.yml):GITHUB_CLIENT_ID}
    GITHUB_CLIENT_SECRET: ${file(stage-prod.yml):GITHUB_CLIENT_SECRET}
    LINKEDIN_CLIENT_ID: ${file(stage-prod.yml):LINKEDIN_CLIENT_ID}
    LINKEDIN_CLIENT_SECRET: ${file(stage-prod.yml):LINKEDIN_CLIENT_SECRET}
    COGNITO_CLIENT_SECRET: ${file(stage-prod.yml):COGNITO_CLIENT_SECRET}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
        - lambda:InvokeAsync
      Resource: "*"
    - Effect: "Allow"
      Action: rds:*
      Resource: "*"
    - Effect: "Allow"
      Action: dynamodb:*
      Resource: "*"
    
functions:
  getTags:
    handler: lambda/tags/get-tags.getTags
    events:
      - http:
          path: tags
          method: get
  getTils:
    handler: lambda/tils/get-tils.getTils
    events:
      - http:
          path: tils
          method: get
  saveTil:
    handler: lambda/tils/save-til.saveTil
    events:
      - http:
          path: saveTil
          method: post
          cors:
            origin: "*"
  deleteTil:
    handler: lambda/tils/delete-til.deleteTil
    events:
      - http:
          path: deleteTil
          method: delete
          cors:
            origin: "*"            
  likeTil:
    handler: lambda/tils/like-til.likeTil
    events:
      - http:
          path: likeTil
          method: put
          cors:
            origin: "*"
  unlikeTil:
    handler: lambda/tils/unlike-til.unlikeTil
    events:
      - http:
          path: unlikeTil
          method: put
          cors:
            origin: "*"
            # headers:
            #   - Access-Control-Allow-Origin
            #   - Content-Type
            #   - X-Amz-Date
            #   - Authorization
            #   - X-Identity-Id
            #   - X-Api-Key
            #   - X-Amz-Security-Token
            #   - X-Amz-User-Agent              
  getStatistics:
    handler: lambda/statistics/get-statistics.getStatistics
    events:
      - http:
          path: statistics
          method: get
  authUserWithCognito:
    handler: lambda/auth/cognito.getUser
    events:
      - http:
          path: auth/cogAuth
          method: get          
  authUserWithLinkedin:
    handler: lambda/auth/linkedin.getUser
    events:
      - http:
          path: auth/liAuth
          method: get  
  authUserWithGithub:
    handler: lambda/auth/github.getUser
    events:
      - http:
          path: auth/ghAuth
          method: get           
  getUser:
    handler: lambda/users/get-user.getUser
    events:
      - http:
          path: user
          method: get                           
  updateUser:
    handler: lambda/users/update-user.updateUser
    events:
      - http:
          path: user
          method: put     
          cors:
            origin: "*"

